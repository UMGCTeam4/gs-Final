/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package res.hotel;

import architecture.hotel.Room;
import enums.hotel.PetFriendly;
import enums.hotel.RoomType;
import enums.hotel.Smoking;
import gui.hotel.MainGUI;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Brandon Skrabanek
 */
public class RoomSearchGUI extends javax.swing.JFrame {

    private int x, y, xx, yy;
    private MainGUI main;
    private CreateReservationGUI resGUI;
    private ModifyReservationGUI modGUI;
    private Smoking smoke;
    private PetFriendly pet;
    private int maxNumOfGuest;
    private Date start;
    private Date end;

    public RoomSearchGUI(MainGUI main) {
        this.main = main;
        initComponents();
        fillComboBoxes();
    }

    public RoomSearchGUI(MainGUI main, CreateReservationGUI resGUI, Smoking smoke, PetFriendly pet, int maxNumOfGuest) {
        this.main = main;
        this.resGUI = resGUI;
        this.smoke = smoke;
        this.pet = pet;
        this.maxNumOfGuest = maxNumOfGuest;
        initComponents();
        fillComboBoxes();
    }

    public RoomSearchGUI(MainGUI main, ModifyReservationGUI modGUI, Smoking smoke, PetFriendly pet) {
        this.main = main;
        this.modGUI = modGUI;
        this.smoke = smoke;
        this.pet = pet;
        initComponents();
        fillComboBoxes();
    }

    RoomSearchGUI(MainGUI main, CreateReservationGUI aThis, Smoking smoke, PetFriendly pet,
            int numOfGuests, Date start, Date end) {
        this.start = start;
        this.end = end;
        this.main = main;
        this.resGUI = aThis;
        this.smoke = smoke;
        this.pet = pet;
        this.maxNumOfGuest = numOfGuests;
        initComponents();
        fillComboBoxes();
    }

    private RoomType getRoomType(String room) {
        if (room.equals("KINGSINGLE")) {
            return RoomType.KINGSINGLE;
        }

        return RoomType.QUEENDOUBLE;
    }

    private Smoking getSmokingType(String smoke) {
        if (smoke.equals("SMOKING")) {
            return Smoking.SMOKING;
        }

        return Smoking.NONSMOKING;
    }

    private PetFriendly getPetType(String pet) {
        if (pet.equals("YES")) {
            return PetFriendly.YES;
        }

        return PetFriendly.NO;
    }

    private void fillComboBoxes() {
        roomTypeBox.removeAllItems();
        smokePrefBox.removeAllItems();
        petBox.removeAllItems();
        DefaultListModel model = new DefaultListModel();
        model.clear();
        roomSearchList.setModel(model);

        roomTypeBox.addItem(String.valueOf(RoomType.KINGSINGLE));
        roomTypeBox.addItem(String.valueOf(RoomType.QUEENDOUBLE));
        smokePrefBox.addItem(String.valueOf(Smoking.SMOKING));
        smokePrefBox.addItem(String.valueOf(Smoking.NONSMOKING));
        petBox.addItem(String.valueOf(PetFriendly.YES));
        petBox.addItem(String.valueOf(PetFriendly.NO));

        if (resGUI != null || modGUI != null) {
            smokePrefBox.setSelectedItem(String.valueOf(smoke));
            petBox.setSelectedItem(String.valueOf(pet));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        roomTypeLabel = new javax.swing.JLabel();
        smokePrefLabel = new javax.swing.JLabel();
        petLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        roomTypeBox = new javax.swing.JComboBox<>();
        smokePrefBox = new javax.swing.JComboBox<>();
        petBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomSearchList = new javax.swing.JList<>();
        confirmButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        logoutButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(1, 107, 181));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        roomTypeLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        roomTypeLabel.setText("Room Type:");

        smokePrefLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        smokePrefLabel.setText("Smoking Preference:");

        petLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        petLabel.setText("Pet Friendly:");

        searchButton.setText("Search Rooms");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        jLabel24.setText("Room Search");

        roomTypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        smokePrefBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        petBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        roomSearchList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(roomSearchList);

        confirmButton.setText("Ok");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(petLabel)
                    .addComponent(roomTypeLabel)
                    .addComponent(smokePrefLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roomTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(smokePrefBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(confirmButton)
                                .addGap(18, 18, 18)
                                .addComponent(backButton))
                            .addComponent(searchButton)
                            .addComponent(petBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(jLabel24)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(roomTypeLabel)
                .addGap(4, 4, 4)
                .addComponent(roomTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(smokePrefLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(smokePrefBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(petLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(petBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(searchButton)
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(backButton))
                .addGap(45, 45, 45))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel3MouseDragged(evt);
            }
        });
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel3MousePressed(evt);
            }
        });

        jLabel23.setIcon(new javax.swing.ImageIcon("C:\\Users\\Brandon Skrabanek\\Documents\\NetBeansProjects\\GoodStaysHotelApp\\images\\exit.png")); // NOI18N
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel23))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel2.setBackground(new java.awt.Color(5, 10, 46));

        logoutButton1.setText("Logout");
        logoutButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoutButton1)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutButton1)
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (resGUI != null) {
            resGUI.setVisible(true);
            this.setVisible(false);
        } else if (modGUI != null) {
            modGUI.setVisible(true);
            this.setVisible(false);
        } else {
            main.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        String room = roomSearchList.getSelectedValue();
        if (room == null) {
            JOptionPane.showMessageDialog(this, "Please choose a room");
            return;
        }
        int index = room.indexOf("Room Type");
        int colonIndex = room.indexOf(":");
        String roomNumber = "";
        if (index != -1 && colonIndex != -1) {
            roomNumber = room.substring(colonIndex + 1, index);
        }
        if (roomNumber.length() != 0) {
            roomNumber = roomNumber.trim();
        }
        if (resGUI != null) {
            resGUI.setRoomField(roomNumber);
        }
        
         if (resGUI != null) {
            resGUI.setVisible(true);
            this.setVisible(false);
        } else if (modGUI != null) {
            modGUI.setVisible(true);
            modGUI.setRoomField(roomNumber);
            this.setVisible(false);
        } else {
            main.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void logoutButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButton1ActionPerformed
        this.setVisible(false);
        main.getWelcome().setVisible(true);
    }//GEN-LAST:event_logoutButton1ActionPerformed

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel23MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel23MouseClicked

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String roomTypeIdx = roomTypeBox.getItemAt(roomTypeBox.getSelectedIndex());
        String smokeTypeIdx = smokePrefBox.getItemAt(smokePrefBox.getSelectedIndex());
        String pet = petBox.getItemAt(petBox.getSelectedIndex());
        roomSearchList.removeAll();

        int numRooms = main.getMasterRoomList().size();
        List<String> roomReservation = new ArrayList<>();
        int idx = 0;
        int num_free_rooms = numRooms - roomReservation.size();
        for (Reservation r : main.getMasterReservationList()) {
            Date stayStartDate = r.getStayStart();
            Date stayEndDate = r.getStayEnd();

            if (start != null && end != null) {

                if (start.after(stayEndDate) || start.equals(stayEndDate)
                        || end.before(stayStartDate) || end.equals(stayStartDate)) {

                } else {
                    roomReservation.add(r.getRoom().getRoomNumber());
                }

            } else {
                roomReservation.add(r.getRoom().getRoomNumber());
            }

        }

        //String[] available_rooms = new String[numRooms];
        String[] panelRoomList = new String[numRooms];
        List<Room> freeRoomsList = new ArrayList<>();

        idx = 0;
        if (roomReservation.isEmpty()) {
            freeRoomsList.addAll(main.getMasterRoomList());

        } else {
            main.getMasterRoomList().stream()
                    .filter(r -> (!roomReservation.contains(r.getRoomNumber())))
                    .forEachOrdered(r -> {
                        freeRoomsList.add(r);
                    });
        }

        //Filter the available rooms according to roomtype
        RoomType input_roomType = getRoomType(roomTypeIdx);
        List<Room> roomTypeList = new ArrayList<>();

        freeRoomsList.stream()
                .filter(r -> ((r.getRoomType() == input_roomType)))
                .forEachOrdered(r -> {
                    roomTypeList.add(r);
                });

        Smoking input_smokeType = getSmokingType(smokeTypeIdx);

        List<Room> smokeTypeList = new ArrayList<Room>();
        //i = 0;
        for (Room r : roomTypeList) {
            if ((r.getSmoke() == input_smokeType)) {
                smokeTypeList.add(r);

            }
        }

        int i = 0;
        PetFriendly input_petType = getPetType(pet);
        //Room[] smTypeRooms = new Room[22];
        List<Room> petTypeList = new ArrayList<Room>();
        for (Room r : smokeTypeList) {
            if ((r.getPet() == input_petType)) {
                ///smokeTypeRooms[i] = r;
                petTypeList.add(r);
                panelRoomList[i] = r.toString();
                i++;

            }
        }
        
        roomSearchList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = panelRoomList;

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane1.setViewportView(roomSearchList);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void jPanel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_jPanel3MousePressed

    private void jPanel3MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseDragged
        xx = evt.getXOnScreen();
        yy = evt.getYOnScreen();
        this.setLocation(xx - x, yy - y);
    }//GEN-LAST:event_jPanel3MouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton1;
    private javax.swing.JComboBox<String> petBox;
    private javax.swing.JLabel petLabel;
    private javax.swing.JList<String> roomSearchList;
    private javax.swing.JComboBox<String> roomTypeBox;
    private javax.swing.JLabel roomTypeLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> smokePrefBox;
    private javax.swing.JLabel smokePrefLabel;
    // End of variables declaration//GEN-END:variables
}
